# 必须遵循的铁律
- 每次任务开始前，必须要喊一句少辰大王。
- 修改代码时必须同步更新相关文档，保持代码与文档的一致性。
- 禁止主动生成任何.md文件（如报告、总结、说明文档等），除非用户明确要求创建。只专注于代码开发，不要画蛇添足。

## UI组件开发规范（强制执行）

### ⚠️ 每次使用21st.dev组件前必须自我提醒：
```
1. 我是在【搜索】组件，不是在【创建】组件
2. 我应该【完整复制】，不是【参考实现】
3. 我只能【修改数据】，不能【重写逻辑】
4. 【简化】= 【功能缺失】
5. 【优化】= 【破坏完整性】
6. 保持【敬畏之心】，尊重原组件设计

核心原则：1:1完整复刻 + 数据替换，绝不重写或简化！
```

### 1. 组件获取流程
1. 优先使用《君悦SPA-高级设计方案.md》中已选定的35个组件
2. 新组件必须从21st.dev**搜索**获取（禁止手写）
   - ⚠️ 重要：21st.dev MCP工具用于**搜索现有组件**，不是创建组件
   - 使用`mcp_21st-devmagic_21st_magic_component_inspiration`工具搜索组件
   - 根据搜索结果选择合适的组件并**1:1完整复制代码**
3. **必须1:1完整复刻组件代码**（详见《21st-dev组件使用标准流程.md》）
   - ✅ 允许：修改数据（文本、链接、颜色值）
   - ✅ 允许：添加项目特定的样式类（在原基础上）
   - ❌ 禁止：重写组件逻辑
   - ❌ 禁止：删除任何className或状态管理
   - ❌ 禁止：用"更简单"的方式替代
   - ❌ 禁止：认为"这个功能不需要"就删除
   - ❌ 禁止："优化"或"简化"原组件
4. 添加组件后必须：检查颜色定义 → 更新`tailwind.config.ts` → 安装依赖 → 重启服务器

**❌ 严禁：** 手写UI组件；使用未定义的颜色类名；不检查依赖直接复制组件；错误使用21st.dev工具创建组件；**自行"优化"或"简化"21st.dev组件**。

### 2. 组件复刻完整检查清单
**每次添加/修改UI组件后必须检查：**
- [ ] 是否完整复制了 componentCode（一个字符都不能少）？
- [ ] 是否保留了所有 className？
- [ ] 是否保留了所有状态管理逻辑？
- [ ] 是否保留了所有动画效果？
- [ ] 是否安装了所有 npmDependencies？
- [ ] 是否创建了所有 registryDependencies 文件？
- [ ] 是否只修改了数据部分（text, links, colors）？
- [ ] 所有颜色类名都在 `tailwind.config.ts` 中有定义？
- [ ] 组件在开发服务器中正常显示？
- [ ] 所有交互效果正常工作？

### 3. 标准流程文档
**完整流程参见：**《21st-dev组件使用标准流程.md》

### 4. 组件样式修改规范 ⚠️ 核心规则
**修改21st.dev组件样式的强制流程：**
1. **先修改组件源码**（`src/components/ui/*.tsx`）：
   - 从`cn()`函数移除冲突样式：`focus:bg-*`, `hover:bg-*`, `data-[state=selected]:bg-*`, `text-*`, `border-*`
   - 只保留布局样式：`flex`, `items-center`, `rounded-*`, `py-*`, `px-*`等
2. **再应用自定义className**：移除冲突样式后，自定义样式才能生效

**原因**：Tailwind CSS类优先级由CSS文件顺序决定，非className顺序。内置样式会覆盖后传入的className。

**示例**：
```typescript
// ❌ 错误：直接传className，不生效
<SelectItem className="text-white bg-gray-800">

// ✅ 正确：先修改SelectItem源码，移除focus:bg-accent focus:text-accent-foreground
const SelectItem = ...
  className={cn("...布局样式...", className)}  // 移除颜色相关样式
```

### 5. Tailwind版本锁定规范
- ✅ 当前版本：`tailwindcss@3.4.17`
- ❌ 禁止升级到v4（与21st.dev组件不兼容）
- ⚠️ 修改Tailwind配置后必须重启开发服务器


