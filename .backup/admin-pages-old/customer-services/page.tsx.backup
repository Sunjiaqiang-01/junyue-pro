"use client";

import { useSession } from "next-auth/react";
import { useRouter } from "next/navigation";
import { useEffect, useState } from "react";
import { Loader2, Plus, Pencil, Trash2, Power, ArrowLeft, Upload } from "lucide-react";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle } from "@/components/ui/dialog";
import { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle } from "@/components/ui/alert-dialog";
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table";
import { Badge } from "@/components/ui/badge";
import { toast } from "sonner";
import Image from "next/image";
import Link from "next/link";
import ProvinceCitySelector from "@/components/ProvinceCitySelector";

interface City {
  id: string;
  name: string;
}

interface CustomerServiceCity {
  id: string;
  city: City;
}

interface CustomerService {
  id: string;
  cityId: string | null;
  city: City | null;
  name: string;
  wechatQrCode: string;
  wechatId: string | null;
  phone: string | null;
  workingHours: string;
  isActive: boolean;
  order: number;
  cities: CustomerServiceCity[]; // 负责的多个城市
}

interface ServiceForm {
  cityNames: string[]; // 多个城市名称
  name: string;
  wechatQrCode: string;
  wechatId: string;
  phone: string;
  workingHours: string;
}

export default function CustomerServicesPage() {
  const { data: session, status } = useSession();
  const router = useRouter();
  
  const [loading, setLoading] = useState(true);
  const [services, setServices] = useState<CustomerService[]>([]);
  const [cities, setCities] = useState<City[]>([]);
  const [filterCityId, setFilterCityId] = useState<string>("all");
  
  const [showDialog, setShowDialog] = useState(false);
  const [editingService, setEditingService] = useState<CustomerService | null>(null);
  const [uploadingQr, setUploadingQr] = useState(false);
  const [submitting, setSubmitting] = useState(false);
  
  const [deleteDialogOpen, setDeleteDialogOpen] = useState(false);
  const [serviceToDelete, setServiceToDelete] = useState<string | null>(null);
  const [deleting, setDeleting] = useState(false);
  
  const [form, setForm] = useState<ServiceForm>({
    cityNames: [],
    name: "",
    wechatQrCode: "",
    wechatId: "",
    phone: "",
    workingHours: "9:00 - 22:00",
  });

  useEffect(() => {
    if (status === "unauthenticated") {
      router.push("/admin/login");
    } else if (status === "authenticated" && session?.user?.role === "admin") {
      fetchCities();
      fetchServices();
    }
  }, [status, session, router]);

  const fetchCities = async () => {
    try {
      const res = await fetch("/api/cities");
      const data = await res.json();
      if (data.success) {
        setCities(data.data || []);
      }
    } catch (error) {
      console.error("获取城市列表失败:", error);
    }
  };

  const fetchServices = async () => {
    try {
      const url = filterCityId === "all" 
        ? "/api/admin/customer-services"
        : `/api/admin/customer-services?cityId=${filterCityId}`;
      
      const res = await fetch(url);
      const data = await res.json();

      if (data.success) {
        setServices(data.data || []);
      }
    } catch (error) {
      console.error("获取客服列表失败:", error);
      toast.error("网络错误");
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    if (status === "authenticated") {
      fetchServices();
    }
  }, [filterCityId]);

  const handleAdd = () => {
    setEditingService(null);
    setForm({
      cityNames: [],
      name: "",
      wechatQrCode: "",
      wechatId: "",
      phone: "",
      workingHours: "9:00 - 22:00",
    });
    setShowDialog(true);
  };

  const handleEdit = (service: CustomerService) => {
    setEditingService(service);
    setForm({
      cityNames: service.cities?.map(c => c.city.name) || [],
      name: service.name,
      wechatQrCode: service.wechatQrCode,
      wechatId: service.wechatId || "",
      phone: service.phone || "",
      workingHours: service.workingHours,
    });
    setShowDialog(true);
  };

  const handleQrCodeUpload = async (e: React.ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0];
    if (!file) return;

    setUploadingQr(true);
    try {
      const formData = new FormData();
      formData.append("file", file);
      formData.append("type", "customer-service-qr");

      const res = await fetch("/api/upload/images", {
        method: "POST",
        body: formData,
      });

      const data = await res.json();
      if (data.success) {
        setForm({ ...form, wechatQrCode: data.url });
        toast.success("二维码上传成功");
      } else {
        toast.error(data.error || "上传失败");
      }
    } catch (error) {
      console.error("上传二维码失败:", error);
      toast.error("网络错误");
    } finally {
      setUploadingQr(false);
    }
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setSubmitting(true);

    try {
      const url = editingService
        ? `/api/admin/customer-services/${editingService.id}`
        : "/api/admin/customer-services";
      
      const method = editingService ? "PUT" : "POST";

      const res = await fetch(url, {
        method,
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          cityNames: form.cityNames, // 多个城市名称
          name: form.name,
          wechatQrCode: form.wechatQrCode,
          wechatId: form.wechatId || null,
          phone: form.phone || null,
          workingHours: form.workingHours,
        }),
      });

      const data = await res.json();

      if (data.success) {
        toast.success(editingService ? "更新成功" : "添加成功");
        setShowDialog(false);
        fetchServices();
      } else {
        toast.error(data.error || "操作失败");
      }
    } catch (error) {
      console.error("保存客服失败:", error);
      toast.error("网络错误");
    } finally {
      setSubmitting(false);
    }
  };

  const handleToggle = async (id: string) => {
    try {
      const res = await fetch(`/api/admin/customer-services/${id}/toggle`, {
        method: "PATCH",
      });
      const data = await res.json();

      if (data.success) {
        toast.success(data.message);
        fetchServices();
      } else {
        toast.error(data.error || "操作失败");
      }
    } catch (error) {
      console.error("切换状态失败:", error);
      toast.error("网络错误");
    }
  };

  const handleDelete = async (id: string) => {
    setDeleting(true);
    try {
      const res = await fetch(`/api/admin/customer-services/${id}`, {
        method: "DELETE",
      });
      const data = await res.json();

      if (data.success) {
        toast.success("删除成功");
        setDeleteDialogOpen(false);
        setServiceToDelete(null);
        fetchServices();
      } else {
        toast.error(data.error || "删除失败");
      }
    } catch (error) {
      console.error("删除失败:", error);
      toast.error("网络错误");
    } finally {
      setDeleting(false);
    }
  };

  if (status === "loading" || loading) {
    return (
      <div className="min-h-screen bg-gradient-to-b from-black to-gray-900 flex items-center justify-center">
        <Loader2 className="h-8 w-8 animate-spin text-primary-gold" />
      </div>
    );
  }

  if (!session || session.user.role !== "admin") {
    return null;
  }

  return (
    <div className="min-h-screen bg-gradient-to-b from-black to-gray-900 p-4 md:p-8">
      <div className="max-w-7xl mx-auto">
        {/* 顶部标题栏 */}
        <div className="flex items-center justify-between mb-8">
          <div className="flex items-center gap-4">
          <Link href="/admin/dashboard">
              <Button variant="outline" size="sm" className="border-gray-700 text-white font-medium hover:bg-gray-800">
              <ArrowLeft className="w-4 h-4 mr-2" />
              返回
            </Button>
          </Link>
          <div>
            <h1 className="text-4xl font-bold text-primary-gold mb-2">客服配置管理</h1>
              <p className="text-gray-400">管理多城市客服信息</p>
            </div>
          </div>
          <Button
            onClick={handleAdd}
            className="bg-primary-gold text-black font-medium hover:bg-primary-gold/90"
          >
            <Plus className="w-4 h-4 mr-2" />
            添加客服
          </Button>
        </div>

        {/* 筛选栏 */}
        <div className="bg-white/5 backdrop-blur-sm border border-gray-800 rounded-xl p-4 mb-6">
          <div className="flex items-center gap-4">
            <Label className="text-white font-medium">筛选城市：</Label>
            <Select value={filterCityId} onValueChange={setFilterCityId}>
              <SelectTrigger className="w-48 bg-gray-700 border-gray-600 text-white">
                <SelectValue />
              </SelectTrigger>
              <SelectContent className="bg-gray-800 border-gray-600">
                <SelectItem value="all" className="text-white font-medium hover:bg-gray-700 cursor-pointer">
                  全部
                </SelectItem>
                {cities.map((city) => (
                  <SelectItem
                    key={city.id}
                    value={city.id}
                    className="text-white font-medium hover:bg-gray-700 cursor-pointer"
                  >
                    {city.name}
                  </SelectItem>
                ))}
              </SelectContent>
            </Select>
            <span className="text-gray-400 text-sm">共 {services.length} 个客服</span>
          </div>
        </div>

        {/* 客服列表表格 */}
        <div className="bg-white/5 backdrop-blur-sm border border-gray-800 rounded-xl overflow-hidden">
          <Table>
            <TableHeader>
              <TableRow className="border-gray-800 hover:bg-transparent">
                <TableHead className="text-gray-100 font-semibold">客服名称</TableHead>
                <TableHead className="text-gray-100 font-semibold">所属城市</TableHead>
                <TableHead className="text-gray-100 font-semibold">微信号</TableHead>
                <TableHead className="text-gray-100 font-semibold">电话</TableHead>
                <TableHead className="text-gray-100 font-semibold">工作时间</TableHead>
                <TableHead className="text-gray-100 font-semibold">状态</TableHead>
                <TableHead className="text-gray-100 font-semibold text-right">操作</TableHead>
              </TableRow>
            </TableHeader>
            <TableBody>
              {services.length === 0 ? (
                <TableRow>
                  <TableCell colSpan={7} className="text-center text-gray-400 py-12">
                    暂无客服数据，点击"添加客服"开始配置
                  </TableCell>
                </TableRow>
              ) : (
                services.map((service) => (
                  <TableRow key={service.id} className="border-gray-800 hover:bg-white/5">
                    <TableCell className="text-white font-medium">{service.name}</TableCell>
                    <TableCell className="text-gray-100">
                      {service.city ? service.city.name : <span className="text-primary-gold">全国通用</span>}
                    </TableCell>
                    <TableCell className="text-gray-100">{service.wechatId || "-"}</TableCell>
                    <TableCell className="text-gray-100">{service.phone || "-"}</TableCell>
                    <TableCell className="text-gray-100">{service.workingHours}</TableCell>
                    <TableCell>
                      <Badge
                        variant={service.isActive ? "default" : "secondary"}
                        className={service.isActive ? "bg-green-600 text-white" : "bg-gray-600 text-white"}
                      >
                        {service.isActive ? "启用" : "禁用"}
                      </Badge>
                    </TableCell>
                    <TableCell className="text-right">
                      <div className="flex items-center justify-end gap-2">
                        <Button
                          variant="ghost"
                          size="sm"
                          onClick={() => handleToggle(service.id)}
                          className="text-gray-300 hover:text-white hover:bg-gray-800"
                        >
                          <Power className="w-4 h-4" />
                        </Button>
                        <Button
                          variant="ghost"
                          size="sm"
                          onClick={() => handleEdit(service)}
                          className="text-gray-300 hover:text-white hover:bg-gray-800"
                        >
                          <Pencil className="w-4 h-4" />
                        </Button>
                        <Button
                          variant="ghost"
                          size="sm"
                          onClick={() => {
                            setServiceToDelete(service.id);
                            setDeleteDialogOpen(true);
                          }}
                          className="text-red-400 hover:text-red-300 hover:bg-red-950"
                        >
                          <Trash2 className="w-4 h-4" />
                        </Button>
                      </div>
                    </TableCell>
                  </TableRow>
                ))
              )}
            </TableBody>
          </Table>
        </div>

        {/* 添加/编辑Dialog */}
        <Dialog open={showDialog} onOpenChange={setShowDialog}>
          <DialogContent className="bg-gray-900 border-gray-700 text-white max-w-2xl">
            <DialogHeader>
              <DialogTitle>{editingService ? "编辑客服" : "添加客服"}</DialogTitle>
              <DialogDescription className="text-gray-400">
                配置客服信息和微信二维码
              </DialogDescription>
            </DialogHeader>

            <form onSubmit={handleSubmit} className="space-y-4">
              <div className="space-y-2">
                <Label>所属城市</Label>
                <ProvinceCitySelector
                  value={form.cityName}
                  onChange={(city) => setForm({ ...form, cityName: city, cityId: city })}
                  placeholder="选择城市（不选则为全国通用）"
                  className="bg-white/5 border-gray-700 text-white hover:bg-white/10"
                />
                <p className="text-xs text-gray-500">不选择城市则为全国通用客服</p>
              </div>

              <div className="space-y-2">
                <Label htmlFor="name">客服名称</Label>
                <Input
                  id="name"
                  value={form.name}
                  onChange={(e) => setForm({ ...form, name: e.target.value })}
                  placeholder="如：上海客服、默认客服"
                  required
                  className="bg-white/5 border-gray-700 text-white"
                />
              </div>

              <div className="space-y-2">
                <Label>微信二维码</Label>
                {form.wechatQrCode && (
                  <div className="relative w-48 h-48 mx-auto rounded-lg overflow-hidden border-2 border-primary-gold/30">
                    <Image src={form.wechatQrCode} alt="客服微信二维码" fill className="object-cover" />
                </div>
              )}
                <input
                  type="file"
                  accept="image/*"
                  onChange={handleQrCodeUpload}
                  disabled={uploadingQr}
                  className="hidden"
                  id="qr-upload"
                />
                <label
                  htmlFor="qr-upload"
                  className={`flex items-center justify-center gap-2 w-full py-3 px-4 border-2 border-dashed border-gray-700 rounded-lg cursor-pointer hover:border-primary-gold transition-colors ${uploadingQr ? "opacity-50 cursor-not-allowed" : ""}`}
                >
                  {uploadingQr ? (
                    <>
                      <Loader2 className="w-5 h-5 animate-spin text-primary-gold" />
                      <span className="text-white">上传中...</span>
                    </>
                  ) : (
                    <>
                      <Upload className="w-5 h-5 text-primary-gold" />
                      <span className="text-white">{form.wechatQrCode ? "更换二维码" : "上传二维码"}</span>
                    </>
                  )}
                </label>
          </div>

              <div className="grid grid-cols-2 gap-4">
                <div className="space-y-2">
                  <Label htmlFor="wechatId">微信号</Label>
                <Input
                  id="wechatId"
                    value={form.wechatId}
                    onChange={(e) => setForm({ ...form, wechatId: e.target.value })}
                  placeholder="请输入客服微信号"
                  className="bg-white/5 border-gray-700 text-white"
                />
              </div>

                <div className="space-y-2">
                  <Label htmlFor="phone">客服电话</Label>
                <Input
                  id="phone"
                  type="tel"
                    value={form.phone}
                    onChange={(e) => setForm({ ...form, phone: e.target.value })}
                  placeholder="请输入客服电话"
                  className="bg-white/5 border-gray-700 text-white"
                />
                </div>
              </div>

              <div className="space-y-2">
                <Label htmlFor="workingHours">工作时间</Label>
                <Input
                  id="workingHours"
                  value={form.workingHours}
                  onChange={(e) => setForm({ ...form, workingHours: e.target.value })}
                  placeholder="例如：9:00 - 22:00"
                  required
                  className="bg-white/5 border-gray-700 text-white"
                />
          </div>

              <DialogFooter>
                <Button
                  type="button"
                  variant="outline"
                  onClick={() => setShowDialog(false)}
                  className="border-gray-700 text-white font-medium hover:bg-gray-800"
                >
                  取消
                </Button>
          <Button
            type="submit"
                  disabled={submitting || !form.name || !form.wechatQrCode || !form.workingHours}
                  className="bg-primary-gold text-black font-medium hover:bg-primary-gold/90"
          >
            {submitting ? (
              <>
                      <Loader2 className="w-4 h-4 mr-2 animate-spin" />
                保存中...
              </>
            ) : (
                    "确认保存"
            )}
          </Button>
              </DialogFooter>
        </form>
          </DialogContent>
        </Dialog>

        {/* 删除确认Dialog */}
        <AlertDialog open={deleteDialogOpen} onOpenChange={setDeleteDialogOpen}>
          <AlertDialogContent className="bg-gray-900 border-gray-700 text-white">
            <AlertDialogHeader>
              <AlertDialogTitle>确认删除</AlertDialogTitle>
              <AlertDialogDescription className="text-gray-400">
                此操作不可撤销。确定要删除这个客服吗？
              </AlertDialogDescription>
            </AlertDialogHeader>
            <AlertDialogFooter>
              <AlertDialogCancel className="border-gray-700 text-white font-medium hover:bg-gray-800">
                取消
              </AlertDialogCancel>
              <AlertDialogAction
                onClick={() => serviceToDelete && handleDelete(serviceToDelete)}
                disabled={deleting}
                className="bg-red-600 hover:bg-red-700 text-white"
              >
                {deleting ? (
                  <>
                    <Loader2 className="w-4 h-4 mr-2 animate-spin" />
                    删除中...
                  </>
                ) : (
                  "确认删除"
                )}
              </AlertDialogAction>
            </AlertDialogFooter>
          </AlertDialogContent>
        </AlertDialog>
      </div>
    </div>
  );
}
