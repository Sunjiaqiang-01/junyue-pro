generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Therapist {
  id                   String                         @id @default(cuid())
  phone                String?
  password             String
  nickname             String
  age                  Int
  height               Int
  weight               Int
  city                 String
  areas                String[]
  status               TherapistStatus                @default(PENDING)
  auditReason          String?
  approvedAt           DateTime?
  isOnline             Boolean                        @default(false)
  lastOnlineAt         DateTime?
  isNew                Boolean                        @default(true)
  isFeatured           Boolean                        @default(false)
  createdAt            DateTime                       @default(now())
  updatedAt            DateTime                       @updatedAt
  auditedAt            DateTime?
  cardValue            String?
  location             Json?
  email                String?
  username             String                         @unique
  registrationCodeId   String?
  viewCount            Int                            @default(0)
  notifications        Notification[]
  deactivationRequests TherapistDeactivationRequest[]
  photos               TherapistPhoto[]
  profile              TherapistProfile?
  schedules            TherapistSchedule[]
  videos               TherapistVideo[]
  views                TherapistView[]
  registrationCode     RegistrationCode?              @relation(fields: [registrationCodeId], references: [id])

  @@index([username])
  @@index([email])
  @@index([phone])
  @@index([status])
  @@index([city])
  @@index([isOnline])
  @@index([createdAt])
  @@index([viewCount])
  // 🆕 复合索引 - 优化常用查询组合
  @@index([status, city, createdAt])
  @@index([status, isOnline])
  @@index([status, isFeatured])
  @@index([status, isNew])
  @@index([status, city, viewCount])
  @@map("therapists")
}

model TherapistProfile {
  id             String        @id @default(cuid())
  therapistId    String        @unique
  introduction   String
  specialties    String[]
  serviceType    ServiceType[]
  serviceAddress String?
  serviceLat     Decimal?      @db.Decimal(10, 7)
  serviceLng     Decimal?      @db.Decimal(10, 7)
  serviceRadius  Int?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  therapist      Therapist     @relation(fields: [therapistId], references: [id], onDelete: Cascade)

  @@index([therapistId])
  @@map("therapist_profiles")
}

model TherapistPhoto {
  id           String    @id @default(cuid())
  therapistId  String
  url          String
  order        Int       @default(0)
  createdAt    DateTime  @default(now())
  isPrimary    Boolean   @default(false)
  coverUrl     String?
  duration     Int?
  isVideo      Boolean   @default(false)
  largeUrl     String?
  mediumUrl    String?
  thumbnailUrl String?
  videoUrl     String?
  therapist    Therapist @relation(fields: [therapistId], references: [id], onDelete: Cascade)

  @@index([therapistId])
  @@index([therapistId, isPrimary])
  @@index([order])
  @@map("therapist_photos")
}

model TherapistVideo {
  id          String    @id @default(cuid())
  therapistId String
  url         String
  coverUrl    String?
  duration    Int?
  createdAt   DateTime  @default(now())
  therapist   Therapist @relation(fields: [therapistId], references: [id], onDelete: Cascade)

  @@index([therapistId])
  @@map("therapist_videos")
}

model TherapistSchedule {
  id          String    @id @default(cuid())
  therapistId String
  date        DateTime  @db.Date
  startTime   String
  endTime     String
  isAvailable Boolean   @default(true)
  isRecurring Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  therapist   Therapist @relation(fields: [therapistId], references: [id], onDelete: Cascade)

  @@unique([therapistId, date, startTime])
  @@index([therapistId])
  @@index([date])
  @@map("therapist_schedules")
}

model City {
  id                    String                 @id @default(cuid())
  name                  String                 @unique
  code                  String                 @unique
  isActive              Boolean                @default(true)
  order                 Int                    @default(0)
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  
  areas                 Area[]
  customerServices      CustomerService[]      // 主负责该城市的客服
  customerServiceCities CustomerServiceCity[]  // 负责该城市的所有客服（多对多）

  @@index([isActive])
  @@index([order])
  @@map("cities")
}

model Area {
  id        String   @id @default(cuid())
  cityId    String
  name      String
  code      String
  isActive  Boolean  @default(true)
  order     Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  city      City     @relation(fields: [cityId], references: [id])

  @@unique([cityId, name])
  @@index([cityId])
  @@index([isActive])
  @@map("areas")
}

model Admin {
  id          String    @id @default(cuid())
  username    String    @unique
  password    String
  name        String
  role        AdminRole @default(ADMIN)
  lastLoginAt DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([username])
  @@map("admins")
}

model GuideContent {
  id        String   @id @default(cuid())
  title     String   @default("必看攻略")
  content   String
  order     Int      @default(1)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([isActive])
  @@index([order])
  @@map("guide_contents")
}

model Notification {
  id          String           @id @default(cuid())
  therapistId String?
  type        NotificationType
  title       String
  content     String
  isRead      Boolean          @default(false)
  readAt      DateTime?
  createdAt   DateTime         @default(now())
  therapist   Therapist?       @relation(fields: [therapistId], references: [id], onDelete: Cascade)

  @@index([therapistId])
  @@index([isRead])
  @@index([createdAt])
  @@map("notifications")
}

model Announcement {
  id          String           @id @default(cuid())
  title       String
  content     String
  type        AnnouncementType @default(NOTICE)
  isPublished Boolean          @default(false)
  publishedAt DateTime?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  isActive    Boolean          @default(true)
  sortOrder   Int              @default(0)

  @@index([type])
  @@index([isPublished])
  @@index([publishedAt])
  @@index([isActive])
  @@index([sortOrder])
  @@map("announcements")
}

model CustomerService {
  id              String                 @id @default(cuid())
  name            String                 @default("默认客服") // 客服名称
  wechatQrCode    String                 // 客服微信二维码URL
  wechatId        String?                // 客服微信号
  qq              String?                // 客服QQ号
  workingHours    String                 // 工作时间
  isActive        Boolean                @default(true)
  order           Int                    @default(0)
  
  // 主负责城市（可选，用于向后兼容单城市模式）
  cityId          String?
  city            City?                  @relation(fields: [cityId], references: [id], onDelete: SetNull)
  
  // 负责的城市列表（多对多）
  cities          CustomerServiceCity[]
  
  createdAt       DateTime               @default(now())
  updatedAt       DateTime               @updatedAt

  @@index([isActive])
  @@index([cityId])
  @@map("customer_services")
}

// 客服-城市关联表（多对多）
model CustomerServiceCity {
  id                 String           @id @default(cuid())
  customerServiceId  String
  customerService    CustomerService  @relation(fields: [customerServiceId], references: [id], onDelete: Cascade)
  
  cityId             String
  city               City             @relation(fields: [cityId], references: [id], onDelete: Restrict)
  
  createdAt          DateTime         @default(now())
  
  @@unique([customerServiceId, cityId])
  @@index([customerServiceId])
  @@index([cityId])
  @@map("customer_service_cities")
}

model VerificationCode {
  id        String    @id @default(cuid())
  email     String
  code      String
  type      CodeType  @default(RESET_PASSWORD)
  expiresAt DateTime
  usedAt    DateTime?
  createdAt DateTime  @default(now())

  @@index([email])
  @@index([code])
  @@index([expiresAt])
  @@map("verification_codes")
}

model SecurityLog {
  id        String         @id @default(cuid())
  email     String
  action    SecurityAction
  success   Boolean
  ipAddress String?
  userAgent String?
  createdAt DateTime       @default(now())

  @@index([email, action, createdAt])
  @@index([ipAddress, createdAt])
  @@map("security_logs")
}

model RegistrationCode {
  id          String               @id @default(cuid())
  code        String               @unique
  codeType    RegistrationCodeType @default(LIMITED)
  maxUses     Int                  @default(1)
  currentUses Int                  @default(0)
  expiresAt   DateTime?
  isActive    Boolean              @default(true)
  note        String?
  createdBy   String
  createdAt   DateTime             @default(now())
  updatedAt   DateTime             @updatedAt
  therapists  Therapist[]

  @@index([code])
  @@index([isActive])
  @@index([expiresAt])
  @@map("registration_codes")
}

model TherapistDeactivationRequest {
  id          String             @id @default(cuid())
  therapistId String
  status      DeactivationStatus @default(PENDING)
  reviewerId  String?
  reviewNote  String?
  reviewedAt  DateTime?
  requestedAt DateTime           @default(now())
  executedAt  DateTime?
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  therapist   Therapist          @relation(fields: [therapistId], references: [id], onDelete: Cascade)

  @@index([therapistId])
  @@index([status])
  @@index([requestedAt])
  @@map("therapist_deactivation_requests")
}

enum TherapistStatus {
  PENDING
  APPROVED
  REJECTED
}

enum ServiceType {
  VISIT_CLIENT
  CLIENT_VISIT
  NEGOTIATE
}

enum AdminRole {
  SUPER_ADMIN
  ADMIN
  OPERATOR
}

enum NotificationType {
  SYSTEM
  AUDIT
  ANNOUNCEMENT
}

enum AnnouncementType {
  NOTICE
  ACTIVITY
  MAINTENANCE
}

enum CodeType {
  RESET_PASSWORD
  EMAIL_VERIFY
}

enum SecurityAction {
  CODE_VERIFY
  PASSWORD_RESET
  LOGIN_ATTEMPT
  USERNAME_CHECK
}

enum RegistrationCodeType {
  ONETIME
  LIMITED
  UNLIMITED
}

enum DeactivationStatus {
  PENDING
  APPROVED
  REJECTED
  CANCELLED
}

model TherapistView {
  id          String    @id @default(cuid())
  therapistId String
  ip          String
  userAgent   String?
  referrer    String?
  createdAt   DateTime  @default(now())
  
  therapist   Therapist @relation(fields: [therapistId], references: [id], onDelete: Cascade)

  @@index([therapistId])
  @@index([createdAt])
  @@index([ip])
  // 🆕 复合索引 - 优化统计和防刷查询
  @@index([therapistId, createdAt])
  @@index([ip, createdAt])
  @@map("therapist_views")
}

model SiteVisit {
  id        String   @id @default(cuid())
  page      String
  ip        String
  userAgent String?
  referrer  String?
  createdAt DateTime @default(now())

  @@index([createdAt])
  @@index([page])
  @@index([ip])
  // 🆕 复合索引 - 优化统计和防刷查询
  @@index([page, createdAt])
  @@index([ip, page, createdAt])
  @@map("site_visits")
}
